---
interface Props {
    dialogTitle: string;
    dialogText: string;
}

const { dialogTitle, dialogText } = Astro.props;
---

<custom-dialog>
    <div class="open">
        <slot />
    </div>

    <dialog
        
    class=" z-20 bg-black bg-opacity-50 h-screen w-screen fixed inset-0">
        <div class="relative z-50 pointer-events-auto  w-full h-full flex items-center">
            
            <div

                class="max-w-xl mx-[5%] sm:mx-auto flex flex-col gap-6 bg-gray-400 text-white text-center px-8 py-8 rounded-3xl"
            >
                <h3 class="font-bebas text-4xl">{dialogTitle}</h3>

                <p>{dialogText}</p>

                <div class="close"><slot name="close" /></div>
            </div>
        </div>
    </dialog>
</custom-dialog>


<script>
    // Define the behaviour for our new type of HTML element.
    class AstroHeart extends HTMLElement {
      constructor() {
        super();
       
  
        const actionOpen = this.querySelector('.open');
        const actionClose = this.querySelector('.close');
        const modal = this.querySelector('dialog');

        actionOpen?.addEventListener('click', () => {
            console.log("hola mundo")
            modal?.showModal();
        })
        actionClose?.addEventListener('click', () => {
            modal?.close();
        })
  
      }
    }
  
    // Tell the browser to use our AstroHeart class for <astro-heart> elements.
    customElements.define('custom-dialog', AstroHeart);
  </script>